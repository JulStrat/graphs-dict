ALGORITHMS FOR TREES
----------------------------------------------------------------------
from graphtheory.structures.edges import Edge
from graphtheory.structures.graphs import Graph
from graphtheory.structures.factory import GraphFactory
from graphtheory.forests.treeiset import BorieIndependentSet
from graphtheory.forests.treeiset import TreeIndependentSet
from graphtheory.forests.treedset import BorieDominatingSet
from graphtheory.forests.treedset import TreeDominatingSet
from graphtheory.forests.treecover import BorieNodeCover
from graphtheory.forests.treecover import TreeNodeCover
from graphtheory.forests.treemate import BorieMatching

gf = GraphFactory(Graph)
G = gf.make_tree(n=10)        # random tree
----------------------------------------------------------------------
# FINDING A MAXIMUM INDEPENDENT SET

algorithm = BorieIndependentSet(G)
algorithm.run()
print algorithm.independent_set
print algorithm.cardinality       # the size of max iset
print algorithm.parent            # DFS tree as a dict

algorithm = TreeIndependentSet(G)
algorithm.run()
print algorithm.independent_set
print algorithm.cardinality       # the size of max iset
----------------------------------------------------------------------
# FINDING A MINIMUM DOMINATING SET

algorithm = BorieDominatingSet(G)
algorithm.run()
print algorithm.dominating_set
print algorithm.cardinality       # the size of min dset
print algorithm.parent            # DFS tree as a dict

algorithm = TreeDominatingSet(G)
algorithm.run()
print algorithm.dominating_set
print algorithm.cardinality       # the size of min dset
----------------------------------------------------------------------
# FINDING A MINIMUM NODE COVER

algorithm = BorieNodeCover(G)
algorithm.run()
print algorithm.node_cover
print algorithm.cardinality       # the size of min cover
print algorithm.parent            # DFS tree as a dict

algorithm = TreeNodeCover(G)
algorithm.run()
print algorithm.node_cover
print algorithm.cardinality       # the size of min cover
----------------------------------------------------------------------
# FINDING A MAXIMUM MATCHING

algorithm = BorieMatching(G)
algorithm.run()
print algorithm.mate
print algorithm.mate_set
print algorithm.cardinality       # the size of max matching
print algorithm.parent            # DFS tree as a dict
----------------------------------------------------------------------
EOF
